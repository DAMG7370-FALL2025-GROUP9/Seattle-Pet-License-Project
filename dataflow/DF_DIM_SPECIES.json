{
	"name": "DF_DIM_SPECIES",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Snow_Stage_DS",
						"type": "DatasetReference"
					},
					"name": "sourcePetLicensePrimary"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Snow_Stage_DS",
						"type": "DatasetReference"
					},
					"name": "sinkDimSpecies"
				}
			],
			"transformations": [
				{
					"name": "Clean"
				},
				{
					"name": "DistinctSpecies"
				},
				{
					"name": "RowChanges"
				}
			],
			"scriptLines": [
				"source(output(",
				"          LICENSE_ISSUE_DATE as string,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourcePetLicensePrimary",
				"sourcePetLicensePrimary derive(species_clean = upper(trim(SPECIES))) ~> Clean",
				"Clean keyGenerate(output(SPECIES_KEY as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> DistinctSpecies",
				"DistinctSpecies alterRow(upsertIf(isInsert() || isUpdate())) ~> RowChanges",
				"RowChanges sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['SPECIES_KEY'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          SPECIES_NAME = species_clean,",
				"          SPECIES_KEY",
				"     )) ~> sinkDimSpecies"
			]
		}
	}
}