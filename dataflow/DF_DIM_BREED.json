{
	"name": "DF_DIM_BREED",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Snow_Stage_DS",
						"type": "DatasetReference"
					},
					"name": "sourcePrimary"
				},
				{
					"name": "sourceSecondary"
				},
				{
					"dataset": {
						"referenceName": "Snow_Stage_DS",
						"type": "DatasetReference"
					},
					"name": "sourceSpecies"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "CleanP"
				},
				{
					"name": "LkpSpecies"
				},
				{
					"name": "CleanFilter"
				},
				{
					"name": "ShapePrimary"
				}
			],
			"scriptLines": [
				"source(output(",
				"          LICENSE_ISSUE_DATE as string,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourcePrimary",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false) ~> sourceSecondary",
				"source(output(",
				"          SPECIES_KEY as decimal(38,0),",
				"          SPECIES_NAME as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceSpecies",
				"sourcePrimary derive(species_clean = upper(trim(SPECIES)),",
				"          primary_breed_clean = upper(trim(PRIMARY_BREED))) ~> CleanP",
				"CleanFilter, sourceSpecies lookup(species_clean == SPECIES_NAME,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LkpSpecies",
				"CleanP filter(!isNull(primary_breed_clean) && trim(primary_breed_clean) != '') ~> CleanFilter",
				"LkpSpecies derive(PRIMARY_BREED = toString(substring(primary_breed_clean,0,100)),",
				"          SECONDARY_BREED = toString(null())) ~> ShapePrimary"
			]
		}
	}
}