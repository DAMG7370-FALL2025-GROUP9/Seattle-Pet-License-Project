{
	"name": "DF_DIM_BREED",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Snow_Stage_DS",
						"type": "DatasetReference"
					},
					"name": "sourceSPL"
				},
				{
					"dataset": {
						"referenceName": "Snow_Stage_DS",
						"type": "DatasetReference"
					},
					"name": "sourceSpecies"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Snow_Stage_DS",
						"type": "DatasetReference"
					},
					"name": "sinkDimBreed"
				}
			],
			"transformations": [
				{
					"name": "CleanPet"
				},
				{
					"name": "LkpSpecies"
				},
				{
					"name": "CleanFilter"
				},
				{
					"name": "ShapeForDim"
				},
				{
					"name": "DistinctPairs"
				},
				{
					"name": "RowChanges"
				},
				{
					"name": "surrogateKey"
				}
			],
			"scriptLines": [
				"source(output(",
				"          LICENSE_ISSUE_DATE as string,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceSPL",
				"source(output(",
				"          SPECIES_KEY as decimal(38,0),",
				"          SPECIES_NAME as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceSpecies",
				"sourceSPL derive(species_clean = upper(trim(SPECIES)),",
				"          primary_breed_clean = iif(isNull(PRIMARY_BREED)   || trim(PRIMARY_BREED)==''  , toString(null()), upper(trim(PRIMARY_BREED))),",
				"          secondary_breed_clean = iif(isNull(SECONDARY_BREED) || trim(SECONDARY_BREED)=='' , toString(null()), upper(trim(SECONDARY_BREED)))) ~> CleanPet",
				"CleanFilter, sourceSpecies lookup(species_clean == upper(trim(SPECIES_NAME)),",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LkpSpecies",
				"CleanPet filter(!isNull(primary_breed_clean) || !isNull(secondary_breed_clean)) ~> CleanFilter",
				"LkpSpecies derive(PRIMARY_BREED = toString(substring(primary_breed_clean,0,100)),",
				"          SECONDARY_BREED = toString(substring(secondary_breed_clean,0,100))) ~> ShapeForDim",
				"ShapeForDim aggregate(groupBy(SPECIES_KEY,",
				"          PRIMARY_BREED,",
				"          SECONDARY_BREED),",
				"     row_count = count(1)) ~> DistinctPairs",
				"surrogateKey alterRow(upsertIf(true())) ~> RowChanges",
				"DistinctPairs keyGenerate(output(GENERATED_KEY as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey",
				"RowChanges sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['BREED_KEY','SPECIES_KEY','PRIMARY_BREED_NAME','SECONDARY_BREED_NAME'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          SPECIES_KEY,",
				"          PRIMARY_BREED_NAME = PRIMARY_BREED,",
				"          SECONDARY_BREED_NAME = SECONDARY_BREED,",
				"          BREED_KEY = GENERATED_KEY",
				"     )) ~> sinkDimBreed"
			]
		}
	}
}